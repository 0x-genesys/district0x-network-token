["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$uuid","~$random-uuid","~$boolean?","~$ex-cause","~$ex-message","~$uuid?"]],"~:name","~$medley.core","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","^5",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","~:line",300,"~:column",7,"~:end-line",300,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^I",[["~$s"]]]]],"~:doc","Returns a UUID generated from the supplied string. Same as `cljs.core/uuid`\n  in ClojureScript, while in Clojure it returns a `java.util.UUID` object."],"^;","~$medley.core/uuid","~:variadic",false,"^C","test-compiled/medley/core.cljc","^G",11,"~:method-params",["^I",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^E",1,"^D",300,"^F",300,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^K","Returns a UUID generated from the supplied string. Same as `cljs.core/uuid`\n  in ClojureScript, while in Clojure it returns a `java.util.UUID` object."],"~$dissoc-in",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",11,"^E",7,"^F",11,"^G",16,"^H",["^I",["^J",["^I",[["~$m","~$ks"]]]]],"^K","Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures."],"^;","~$medley.core/dissoc-in","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^N",["^I",[["~$m","^T"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",11,"^F",11,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["~$m","^T"]]]]],"^K","Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures."],"~$drop-upto",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",229,"^E",7,"^F",229,"^G",16,"^H",["^I",["^J",["^I",[["~$pred"],["^W","~$coll"]]]]],"^K","Returns a lazy sequence of the items in coll starting *after* the first item\n  for which `(pred item)` returns true.","~:top-fn",["^ ","^M",false,"^Q",2,"^N",["^I",[["^W"],["^W","^X"]]],"^H",["^I",[["^W"],["^W","^X"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/drop-upto","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["^W"],["^W","^X"]]],"^H",["^I",[["^W"],["^W","^X"]]],"^P",["^I",[null,null]]],"^N",["^I",[["^W"],["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",229,"^F",229,"^Q",2,"^R",true,"^H",["^I",[["^W"],["^W","^X"]]],"^K","Returns a lazy sequence of the items in coll starting *after* the first item\n  for which `(pred item)` returns true."],"^6",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",307,"^E",7,"^F",307,"^G",18,"^H",["^I",["^J",["^I",[[]]]]],"^K","Generates a new random UUID. Same as `cljs.core/random-uuid` except it works\n  for Clojure as well as ClojureScript."],"^;","~$medley.core/random-uuid","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^N",["^I",[[]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",307,"^F",307,"^Q",0,"^R",true,"^H",["^I",["^J",["^I",[[]]]]],"^K","Generates a new random UUID. Same as `cljs.core/random-uuid` except it works\n  for Clojure as well as ClojureScript."],"~$greatest",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",128,"^E",7,"^F",128,"^G",15,"^H",["^I",["^J",["^I",[["~$&","~$xs"]]]]],"^K","Find the greatest argument (as defined by the compare function) in O(n) time.","^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[[],["~$a"],["~$a","~$b"]]],"^H",["^I",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","~$more"]]],"^P",["^I",[null,null,null,null]]]],"^;","~$medley.core/greatest","^M",true,"^C","test-compiled/medley/core.cljc","^G",15,"^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[[],["~$a"],["~$a","~$b"]]],"^H",["^I",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^12"]]],"^P",["^I",[null,null,null,null]]],"^N",["^I",[[],["~$a"],["~$a","~$b"]]],"^O",null,"^P",["^I",[null,null,null,null]],"^E",1,"^D",128,"^F",128,"^Q",2,"^R",true,"^H",["^I",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^12"]]],"^K","Find the greatest argument (as defined by the compare function) in O(n) time."],"^7",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",114,"^E",7,"^F",114,"^G",15,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns true if x is a boolean."],"^;","~$medley.core/boolean?","^M",false,"^C","test-compiled/medley/core.cljc","^G",15,"^N",["^I",[["~$x"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",114,"^F",114,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns true if x is a boolean."],"~$distinct-by",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",164,"^E",7,"^F",164,"^G",18,"^H",["^I",["^J",["^I",[["~$f"],["~$f","^X"]]]]],"^K","Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.","^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["~$f"],["~$f","^X"]]],"^H",["^I",[["~$f"],["~$f","^X"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/distinct-by","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["~$f"],["~$f","^X"]]],"^H",["^I",[["~$f"],["~$f","^X"]]],"^P",["^I",[null,null]]],"^N",["^I",[["~$f"],["~$f","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",164,"^F",164,"^Q",2,"^R",true,"^H",["^I",[["~$f"],["~$f","^X"]]],"^K","Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f."],"~$indexed",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",245,"^E",7,"^F",245,"^G",14,"^H",["^I",["^J",["^I",[["^X"]]]]],"^K","Returns an ordered, lazy sequence of vectors `[index item]`, where item is a\n  value in coll, and index its position starting from zero."],"^;","~$medley.core/indexed","^M",false,"^C","test-compiled/medley/core.cljc","^G",14,"^N",["^I",[["^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",245,"^F",245,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["^X"]]]]],"^K","Returns an ordered, lazy sequence of vectors `[index item]`, where item is a\n  value in coll, and index its position starting from zero."],"~$remove-kv",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",84,"^E",7,"^F",84,"^G",16,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns false."],"^;","~$medley.core/remove-kv","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",84,"^F",84,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns false."],"~$find-first",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",6,"^E",7,"^F",6,"^G",17,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Finds the first item in a collection that matches a predicate."],"^;","~$medley.core/find-first","^M",false,"^C","test-compiled/medley/core.cljc","^G",17,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",6,"^F",6,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Finds the first item in a collection that matches a predicate."],"~$filter-vals",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",78,"^E",7,"^F",78,"^G",18,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns true."],"^;","~$medley.core/filter-vals","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",78,"^F",78,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns true."],"~$deref-swap!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",256,"^E",7,"^F",256,"^G",18,"^H",["^I",["^J",["^I",[["~$atom","~$f","~$&","~$args"]]]]],"^K","Atomically swaps the value of the atom to be `(apply f x args)`, where x is\n  the current value of the atom, then returns the original value of the atom.\n  This function therefore acts like an atomic `deref` then `swap!`.","^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[["^1@","~$f"]]],"^H",["^I",[["^1@","~$f"],["^1@","~$f","~$&","^1A"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/deref-swap!","^M",true,"^C","test-compiled/medley/core.cljc","^G",18,"^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[["^1@","~$f"]]],"^H",["^I",[["^1@","~$f"],["^1@","~$f","~$&","^1A"]]],"^P",["^I",[null,null]]],"^N",["^I",[["^1@","~$f"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",256,"^F",256,"^Q",2,"^R",true,"^H",["^I",[["^1@","~$f"],["^1@","~$f","~$&","^1A"]]],"^K","Atomically swaps the value of the atom to be `(apply f x args)`, where x is\n  the current value of the atom, then returns the original value of the atom.\n  This function therefore acts like an atomic `deref` then `swap!`."],"~$mapply",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",136,"^E",7,"^F",136,"^G",13,"^H",["^I",["^J",["^I",[["~$f","~$&","^1A"]]]]],"^K","Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args. This is useful for applying a function that accepts keyword\n  arguments to a map.","^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[["~$f","~$m"]]],"^H",["^I",[["~$f","~$m"],["~$f","~$a","~$&","^1A"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/mapply","^M",true,"^C","test-compiled/medley/core.cljc","^G",13,"^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[["~$f","~$m"]]],"^H",["^I",[["~$f","~$m"],["~$f","~$a","~$&","^1A"]]],"^P",["^I",[null,null]]],"^N",["^I",[["~$f","~$m"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",136,"^F",136,"^Q",2,"^R",true,"^H",["^I",[["~$f","~$m"],["~$f","~$a","~$&","^1A"]]],"^K","Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args. This is useful for applying a function that accepts keyword\n  arguments to a map."],"~$queue",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",102,"^E",7,"^F",102,"^G",12,"^H",["^I",["^J",["^I",[[],["^X"]]]]],"^K","Creates an empty persistent queue, or one populated with a collection.","^Y",["^ ","^M",false,"^Q",1,"^N",["^I",[[],["^X"]]],"^H",["^I",[[],["^X"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/queue","^M",false,"^C","test-compiled/medley/core.cljc","^G",12,"^Y",["^ ","^M",false,"^Q",1,"^N",["^I",[[],["^X"]]],"^H",["^I",[[],["^X"]]],"^P",["^I",[null,null]]],"^N",["^I",[[],["^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",102,"^F",102,"^Q",1,"^R",true,"^H",["^I",[[],["^X"]]],"^K","Creates an empty persistent queue, or one populated with a collection."],"~$remove-vals",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",96,"^E",7,"^F",96,"^G",18,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns false."],"^;","~$medley.core/remove-vals","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",96,"^F",96,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns false."],"^8",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",287,"^E",7,"^F",287,"^G",15,"^H",["^I",["^J",["^I",[["~$ex"]]]]],"^K","Returns the cause attached to the given ExceptionInfo/Throwable object. For\n  all other types returns nil. Same as `cljs.core/ex-clause` except it works for\n  Clojure as well as ClojureScript."],"^;","~$medley.core/ex-cause","^M",false,"^C","test-compiled/medley/core.cljc","^G",15,"^N",["^I",[["^1I"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",287,"^F",287,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["^1I"]]]]],"^K","Returns the cause attached to the given ExceptionInfo/Throwable object. For\n  all other types returns nil. Same as `cljs.core/ex-clause` except it works for\n  Clojure as well as ClojureScript."],"^9",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",279,"^E",7,"^F",279,"^G",17,"^H",["^I",["^J",["^I",[["^1I"]]]]],"^K","Returns the message attached to the given Error/Throwable object. For all\n  other types returns nil. Same as `cljs.core/ex-message` except it works for\n  Clojure as well as ClojureScript."],"^;","~$medley.core/ex-message","^M",false,"^C","test-compiled/medley/core.cljc","^G",17,"^N",["^I",[["^1I"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",279,"^F",279,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["^1I"]]]]],"^K","Returns the message attached to the given Error/Throwable object. For all\n  other types returns nil. Same as `cljs.core/ex-message` except it works for\n  Clojure as well as ClojureScript."],"~$dedupe-by",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",191,"^E",7,"^F",191,"^G",16,"^H",["^I",["^J",["^I",[["~$f"],["~$f","^X"]]]]],"^K","Returns a lazy sequence of the elements of coll, removing any **consecutive**\n  elements that return duplicate values when passed to a function f.","^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["~$f"],["~$f","^X"]]],"^H",["^I",[["~$f"],["~$f","^X"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/dedupe-by","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["~$f"],["~$f","^X"]]],"^H",["^I",[["~$f"],["~$f","^X"]]],"^P",["^I",[null,null]]],"^N",["^I",[["~$f"],["~$f","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",191,"^F",191,"^Q",2,"^R",true,"^H",["^I",[["~$f"],["~$f","^X"]]],"^K","Returns a lazy sequence of the elements of coll, removing any **consecutive**\n  elements that return duplicate values when passed to a function f."],"~$deref-reset!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",273,"^E",7,"^F",273,"^G",19,"^H",["^I",["^J",["^I",[["^1@","~$newval"]]]]],"^K","Sets the value of the atom without regard for the current value, then returns\n  the original value of the atom. See also: [[deref-swap!]]."],"^;","~$medley.core/deref-reset!","^M",false,"^C","test-compiled/medley/core.cljc","^G",19,"^N",["^I",[["^1@","^1O"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",273,"^F",273,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^1@","^1O"]]]]],"^K","Sets the value of the atom without regard for the current value, then returns\n  the original value of the atom. See also: [[deref-swap!]]."],"~$map-keys",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",56,"^E",7,"^F",56,"^G",15,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]],"^K","Maps a function over the keys of an associative collection."],"^;","~$medley.core/map-keys","^M",false,"^C","test-compiled/medley/core.cljc","^G",15,"^N",["^I",[["~$f","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",56,"^F",56,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]],"^K","Maps a function over the keys of an associative collection."],"~$editable?",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",34,"^E",8,"^F",34,"^G",17,"~:private",true,"^H",["^I",["^J",["^I",[["^X"]]]]]],"^1T",true,"^;","~$medley.core/editable?","^M",false,"^C","test-compiled/medley/core.cljc","^G",17,"^N",["^I",[["^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",34,"^F",34,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["^X"]]]]]],"~$interleave-all",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",145,"^E",7,"^F",145,"^G",21,"^H",["^I",["^J",["^I",[["~$&","~$colls"]]]]],"^K","Returns a lazy seq of the first item in each coll, then the second, etc.\n  Unlike `clojure.core/interleave`, the returned seq contains all items in the\n  supplied collections, even if the collections are different sizes.","^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[[],["~$c1"],["^1X","~$c2"]]],"^H",["^I",[[],["^1X"],["^1X","^1Y"],["^1X","^1Y","~$&","^1W"]]],"^P",["^I",[null,null,null,null]]]],"^;","~$medley.core/interleave-all","^M",true,"^C","test-compiled/medley/core.cljc","^G",21,"^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[[],["^1X"],["^1X","^1Y"]]],"^H",["^I",[[],["^1X"],["^1X","^1Y"],["^1X","^1Y","~$&","^1W"]]],"^P",["^I",[null,null,null,null]]],"^N",["^I",[[],["^1X"],["^1X","^1Y"]]],"^O",null,"^P",["^I",[null,null,null,null]],"^E",1,"^D",145,"^F",145,"^Q",2,"^R",true,"^H",["^I",[[],["^1X"],["^1X","^1Y"],["^1X","^1Y","~$&","^1W"]]],"^K","Returns a lazy seq of the first item in each coll, then the second, etc.\n  Unlike `clojure.core/interleave`, the returned seq contains all items in the\n  supplied collections, even if the collections are different sizes."],"~$remove-keys",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",90,"^E",7,"^F",90,"^G",18,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns false."],"^;","~$medley.core/remove-keys","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",90,"^F",90,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns false."],"~$take-upto",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",210,"^E",7,"^F",210,"^G",16,"^H",["^I",["^J",["^I",[["^W"],["^W","^X"]]]]],"^K","Returns a lazy sequence of successive items from coll up to and including\n  the first item for which `(pred item)` returns true.","^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["^W"],["^W","^X"]]],"^H",["^I",[["^W"],["^W","^X"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/take-upto","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^Y",["^ ","^M",false,"^Q",2,"^N",["^I",[["^W"],["^W","^X"]]],"^H",["^I",[["^W"],["^W","^X"]]],"^P",["^I",[null,null]]],"^N",["^I",[["^W"],["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",210,"^F",210,"^Q",2,"^R",true,"^H",["^I",[["^W"],["^W","^X"]]],"^K","Returns a lazy sequence of successive items from coll up to and including\n  the first item for which `(pred item)` returns true."],"~$filter-keys",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",72,"^E",7,"^F",72,"^G",18,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns true."],"^;","~$medley.core/filter-keys","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",72,"^F",72,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns true."],"~$queue?",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",108,"^E",7,"^F",108,"^G",13,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns true if x implements clojure.lang.PersistentQueue."],"^;","~$medley.core/queue?","^M",false,"^C","test-compiled/medley/core.cljc","^G",13,"^N",["^I",[["~$x"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",108,"^F",108,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns true if x implements clojure.lang.PersistentQueue."],"~$map-kv",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",49,"^E",7,"^F",49,"^G",13,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]],"^K","Maps a function over the key/value pairs of an associate collection. Expects\n  a function that takes two arguments, the key and value, and returns the new\n  key and value as a collection of two elements."],"^;","~$medley.core/map-kv","^M",false,"^C","test-compiled/medley/core.cljc","^G",13,"^N",["^I",[["~$f","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",49,"^F",49,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]],"^K","Maps a function over the key/value pairs of an associate collection. Expects\n  a function that takes two arguments, the key and value, and returns the new\n  key and value as a collection of two elements."],"~$least",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",120,"^E",7,"^F",120,"^G",12,"^H",["^I",["^J",["^I",[["~$&","^11"]]]]],"^K","Return the least argument (as defined by the compare function) in O(n) time.","^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[[],["~$a"],["~$a","~$b"]]],"^H",["^I",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^12"]]],"^P",["^I",[null,null,null,null]]]],"^;","~$medley.core/least","^M",true,"^C","test-compiled/medley/core.cljc","^G",12,"^Y",["^ ","^M",true,"^Q",2,"^N",["^I",[[],["~$a"],["~$a","~$b"]]],"^H",["^I",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^12"]]],"^P",["^I",[null,null,null,null]]],"^N",["^I",[[],["~$a"],["~$a","~$b"]]],"^O",null,"^P",["^I",[null,null,null,null]],"^E",1,"^D",120,"^F",120,"^Q",2,"^R",true,"^H",["^I",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^12"]]],"^K","Return the least argument (as defined by the compare function) in O(n) time."],"~$reduce-map",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",38,"^E",8,"^F",38,"^G",18,"^1T",true,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]]],"^1T",true,"^;","~$medley.core/reduce-map","^M",false,"^C","test-compiled/medley/core.cljc","^G",18,"^N",["^I",[["~$f","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",38,"^F",38,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]]],"^:",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",295,"^E",7,"^F",295,"^G",12,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns true if the value is a UUID."],"^;","~$medley.core/uuid?","^M",false,"^C","test-compiled/medley/core.cljc","^G",12,"^N",["^I",[["~$x"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",295,"^F",295,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns true if the value is a UUID."],"~$abs",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",251,"^E",7,"^F",251,"^G",10,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns the absolute value of a number."],"^;","~$medley.core/abs","^M",false,"^C","test-compiled/medley/core.cljc","^G",10,"^N",["^I",[["~$x"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",251,"^F",251,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns the absolute value of a number."],"~$map-vals",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",61,"^E",7,"^F",61,"^G",15,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]],"^K","Maps a function over the values of an associative collection."],"^;","~$medley.core/map-vals","^M",false,"^C","test-compiled/medley/core.cljc","^G",15,"^N",["^I",[["~$f","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",61,"^F",61,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["~$f","^X"]]]]],"^K","Maps a function over the values of an associative collection."],"~$assoc-some",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",25,"^E",7,"^F",25,"^G",17,"^H",["^I",["^J",["^I",[["~$m","~$k","~$v"],["~$m","~$k","~$v","~$&","~$kvs"]]]]],"^K","Associates a key with a value in a map, if and only if the value is not nil.","^Y",["^ ","^M",true,"^Q",3,"^N",["^I",[["~$m","~$k","~$v"]]],"^H",["^I",[["~$m","~$k","~$v"],["~$m","~$k","~$v","~$&","^2C"]]],"^P",["^I",[null,null]]]],"^;","~$medley.core/assoc-some","^M",true,"^C","test-compiled/medley/core.cljc","^G",17,"^Y",["^ ","^M",true,"^Q",3,"^N",["^I",[["~$m","~$k","~$v"]]],"^H",["^I",[["~$m","~$k","~$v"],["~$m","~$k","~$v","~$&","^2C"]]],"^P",["^I",[null,null]]],"^N",["^I",[["~$m","~$k","~$v"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",25,"^F",25,"^Q",3,"^R",true,"^H",["^I",[["~$m","~$k","~$v"],["~$m","~$k","~$v","~$&","^2C"]]],"^K","Associates a key with a value in a map, if and only if the value is not nil."],"~$map-entry",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",43,"^E",7,"^F",43,"^G",16,"^H",["^I",["^J",["^I",[["~$k","~$v"]]]]],"^K","Create a map entry for a key and value pair."],"^;","~$medley.core/map-entry","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^N",["^I",[["~$k","~$v"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",43,"^F",43,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["~$k","~$v"]]]]],"^K","Create a map entry for a key and value pair."],"~$filter-kv",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/contribution/test-compiled/medley/core.cljc","^D",66,"^E",7,"^F",66,"^G",16,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns true."],"^;","~$medley.core/filter-kv","^M",false,"^C","test-compiled/medley/core.cljc","^G",16,"^N",["^I",[["^W","^X"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",66,"^F",66,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^K","Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns true."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:medley.core/none"]],"~:order",["^2L"]],"^K","A small collection of useful, mostly pure functions that might not look out\n  of place in the clojure.core namespace."]